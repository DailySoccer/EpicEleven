# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="<ruwlaV6Xu?`Ls`eU67?6aA6^YvPD3k`aVrglL;@MQRXpOaflH=0EKftJN`n2cPY"

# The application languages
# ~~~~~
application.langs="es,en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
application.router=backend.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play;MODE=PostgreSQL;DB_CLOSE_DELAY=-1"
# db.default.user=sa
# db.default.password=""
db.default.driver=org.postgresql.Driver
db.default.url="jdbc:postgresql://127.0.0.1/dailysoccerdb?user=postgres&password=postgres"


# After attempting to acquire a connection and failing, try to
# connect this number of times before giving up.
# db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a
# connection again after a failure.
# db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call
# to getConnection is timed out.
# db.default.connectionTimeout=1 second

#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# https://www.playframework.com/documentation/2.3.x/SettingsLogger
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# mongodb://[username:password@]host1[:port1][,hostN[:portN]]/dbName
mongodb.uri="mongodb://127.0.0.1:27017/dailySoccerDB"
# mongodb.uri="mongodb://127.0.0.1:27017/production-live"

# De momento ponemos max-age a 0 para que interrogue al servidor cada vez que se pulse Refresh o Enter
# Recordar que: Si max-age!= 0, "refresh" siempre manda requests de nuevo al servidor, pero "enter" no.
# Respecto al CDN, usamos el TTL de cloudfront para configurar cada cuanto interroga a nuestro server.
assets.defaultCache="max-age=0"

akka {
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  # log-config-on-start = on
}

mongoOptions {
  connectionsPerHost  : 150
  threadsAllowedToBlockForConnectionMultiplier : 150
  connectTimeout      : 30000
  socketTimeout       : 60000
  socketKeepAlive     : true
}

play {
  akka {
    akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = WARNING
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-min = 200
          parallelism-factor = 200
          parallelism-max = 1200
        }
      }
    }
  }
}

default-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "default-executor"
  # Configuration for the fork join pool
  default-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 300
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 300
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

cache-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 300
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 300
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

botSystemActor {
  targetUrl = "http://127.0.0.1:9000"    // # La url a la que atacaran nuestros bots para hacer su cosa de bots
  numBots = 30                           // Hasta 100
  tickInterval = 1 second                // Frecuencia de tick
  tickMode = "NORMAL_TICK"               // "NORMAL_TICK", "AGGRESSIVE_TICK"
  personality = "PRODUCTION"             // "PRODUCTION", "BERSERKER"
  cyclePersonalities = false             // Ciclar por todas las personalidades
  cyclePersonalitiesInterval = 1 minute  // Cada cuando cambiamos a la siguiente personalidad
  autoStart = false
}

transactionsActor {
  autoStart = true
  tickInterval = 1 minute
}

optaProcessorActor {
  autoStart = false
  tickInterval = 3 seconds
}

contestsActor {
  autoStart = true
  tickInterval = 1 minute
}

virtualSetupActor {
  autoStart = false
  tickInterval = 1 minute
}

virtualMatchEventActor {
  autoStart = false
  tickInterval = 9 seconds
  timeMultiplier = 10
}

notificationActor {
  autoStart = false
  tickInterval = 1 minute
}

refresherActor {
  autoStart = false
  tickInterval = 10 minutes
}

paypal {
  mode = "sandbox"
  clientId = "AaM3eTLHhzmJD1JTCdBB4icrGe0fulPDh_iXYI6t3skJ-kT0OSgbyxZcvSITbZWq2avVd9uKTmsbzERg"
  secret = "EOlPbhIL-VItHw6uSPo8ltP3Kr-a_S7pm6_y3N-mPmlHohXRCuAkxASVBc6XoE9VN3r-bkfhyfrSFLGJ"
}

version_ios = "devel"
market_app_id_ios = ""
market_verification_url_ios = "https://sandbox.itunes.apple.com/verifyReceipt"

version_android = "devel"
market_app_id_android = ""
market_app_key_android = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmGVdxhnxvtimkirR63ht+DsU/6N31fkEAxQk3s+v5R2HtuxUeX6YjJ8TGoXqCSPzYUh9WlTNWbxir7XBx+p7VNKjsGU5nz4kbImyy8XiS5CtISljSH/csV+l/8xmiIFjkFZ540N/pAXffoP6HlGe+HBVE/UsApxegVIt2Eq952vXorNdGyZa3CzmnVG3nWBQhsNIjNWWvcbirZ5PPHqfJB+ylnxxdFZeZw6Eff1ndX9I1lMqtBU/vOdmu9TinecJcEywOpYeZ5WBxI6APeq7uwOZRUX8v321ZLN/I+/sKUEuJzRwHUqThAQeaQMwrQbDnsoPdxrK2Ngd/v2sBUksfwIDAQAB"

# El conejo encolador de mensajes
rabbitmq = "amqp://guest:guest@localhost"

activate_players_by_default=true
debug_salary=true

stormpath.directories =
  {"PRODUCTION" = { name = "EpicEleven Directory",
                    description = "Main Epic Eleven Directory",
                    accountStoreId = "3AHd93zqqqEX5DPV21nSWe"
                  }
  ,
  "STAGING" = { name = "Staging Directory",
                 description = "Directory for Testing purposes",
                 accountStoreId = "6lQ40xohPzA6pVDRsgvcbv"
               }
  }

stormpath.currentDirectory = ${stormpath.directories.STAGING}

mandrill_key="r-aNtJFwBFub3r5U73RXoA"

// Ejecutamos siempre en nuestra maquina local, pero tenemos la opcion de leer/escribir en otros entornos.
targetEnvironment="LOCALHOST"     // LOCALHOST, STAGING, PRODUCTION

systemMode="DEVELOPMENT" // DEVELOPMENT, STAGING, PRODUCTION

// Fija la fecha global y para por ejemplo poder enseÃ±ar el juego fuera de temporada. La interrogacion la hace opcional.
fakeDate = ${?FAKE_DATE}
