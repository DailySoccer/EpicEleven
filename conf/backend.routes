GET            /ping                                                   controllers.MainController.ping()
GET            /terminos-de-uso                                        controllers.MainController.termsOfUse()
GET            /politica-de-privacidad                                 controllers.MainController.privacyPolicy()

# Informar de la fecha del server (usado por webclient para sincronizarse con la simulacion)
GET            /current_date                                           controllers.MainController.getCurrentDate()

# Informacion de un futbolista
GET            /get_soccer_player_info/:soccerPlayer                   controllers.MainController.getTemplateSoccerPlayerInfo(soccerPlayer)
GET            /get_instance_soccer_player_info/:contest/:soccerPlayer controllers.MainController.getInstanceSoccerPlayerInfo(contest, soccerPlayer)
GET            /get_soccer_players_by_competition/:competitionId       controllers.MainController.getSoccerPlayersByCompetition(competitionId : String)
GET            /get_soccer_players_by_competition_23                   controllers.MainController.getSoccerPlayersByCompetition_23()
GET            /get_soccer_players_by_competition_8                    controllers.MainController.getSoccerPlayersByCompetition_8()
GET            /get_template_soccer_players                            controllers.MainController.getTemplateSoccerPlayers()
GET            /v2/get_template_soccer_players                         controllers.MainController.getTemplateSoccerPlayersV2()
GET            /get_template_soccer_teams                              controllers.MainController.getTemplateSoccerTeams()

# Reglas del juego
GET            /get_scoring_rules                                      controllers.MainController.getScoringRules()

# Leaderboard
GET            /get_leaderboard                                        controllers.MainController.getLeaderboard()
GET            /v2/get_leaderboard                                     controllers.MainController.getLeaderboardV2()

# Shop
GET            /get_catalog                                            controllers.ShopController.getCatalog()
GET            /get_itunes_catalog                                     controllers.ShopController.getiTunesCatalog()
GET            /get_playstore_catalog                                  controllers.ShopController.getPlayStoreCatalog()
GET            /buy_product/:productId                                 controllers.ShopController.buyProduct(productId : String)
GET            /buy_soccer_player/:contest/:soccerPlayer               controllers.ShopController.buySoccerPlayer(contest : String, soccerPlayer : String)

# Enganche de la zona de administracion
->             /admin                                                  admin.Routes

# Login
POST           /login                                                  controllers.LoginController.login()
POST           /facebooklogin                                          controllers.LoginController.facebookLogin()
POST           /devicelogin                                            controllers.LoginController.deviceLogin()


POST           /signup                                                 controllers.LoginController.signup()
GET            /get_user_profile                                       controllers.LoginController.getUserProfile()
POST           /get_facebook_profiles                                  controllers.LoginController.getFacebookProfiles()
POST           /change_user_profile                                    controllers.LoginController.changeUserProfile()
GET            /get_transaction_history                                controllers.LoginController.getTransactionHistory()
GET            /remove_notification/:notificationId                    controllers.LoginController.removeNotification(notificationId : String)

POST           /ask_for_password_reset                                 controllers.LoginController.askForPasswordReset()
POST           /verify_password_reset_token                            controllers.LoginController.verifyPasswordResetToken()
POST           /reset_password                                         controllers.LoginController.resetPasswordWithToken()

GET            /resend_verification_email                              controllers.LoginController.resendVerificationEmail()
POST           /favorites                                              controllers.MainController.setFavorites()

GET            /add_flag/:flag                                         controllers.MainController.addFlag(flag)
GET            /remove_flag/:flag                                      controllers.MainController.removeFlag(flag)
GET            /has_flag/:flag                                         controllers.MainController.hasFlag(flag)

GET            /claim_reward                                           controllers.MainController.claimReward()

# Crear concurso
POST           /create_contest                                         controllers.ContestController.createContest()

# Concursos globales activos (Lobby)
GET            /get_active_templatecontests                            controllers.ContestControllerV2.getActiveTemplateContests()
GET            /count_active_templatecontests                          controllers.ContestControllerV2.countActiveTemplateContests()
GET            /get_active_contests                                    controllers.ContestController.getActiveContests()
GET            /v2/get_active_contests                                 controllers.ContestControllerV2.getActiveContestsV2()
GET            /get_active_contest/:contest                            controllers.ContestController.getActiveContest(contest)
GET            /v2/get_active_contest/:contest                         controllers.ContestControllerV2.getActiveContestV2(contest)
GET            /get_contest_info/:contest                              controllers.ContestController.getContestInfo(contest)
GET            /v2/get_contest_info/:contest                           controllers.ContestControllerV2.getContestInfoV2(contest)


# Concursos asociados a usuario
GET            /get_my_contests                                        controllers.ContestController.getMyContests()
GET            /get_my_active_contests                                 controllers.ContestController.getMyActiveContests()
GET            /v2/get_my_active_contests                              controllers.ContestControllerV2.getMyActiveContestsV2()
GET            /get_my_live_contests                                   controllers.ContestController.getMyLiveContests()
GET            /v2/get_my_live_contests                                controllers.ContestControllerV2.getMyLiveContestsV2()
GET            /get_my_history_contests                                controllers.ContestController.getMyHistoryContests()
GET            /v2/get_my_history_contests                             controllers.ContestControllerV2.getMyHistoryContestsV2()
GET            /count_my_live_contests                                 controllers.ContestController.countMyLiveContests()
GET            /count_my_contests                                      controllers.ContestController.countMyContests()
GET            /get_my_active_contest/:contest                         controllers.ContestController.getMyActiveContest(contest)
GET            /v2/get_my_active_contest/:contest                      controllers.ContestControllerV2.getMyActiveContestV2(contest)
GET            /get_my_live_contest/:contest                           controllers.ContestController.getMyLiveContest(contest)
GET            /v2/get_my_live_contest/:contest                        controllers.ContestControllerV2.getMyLiveContestV2(contest)
GET            /get_my_history_contest/:contest                        controllers.ContestController.getMyHistoryContest(contest)
GET            /get_my_history_contest_entry/:contest                  controllers.ContestController.getMyHistoryContestEntry(contest)
GET            /get_my_contest_entry/:contest                          controllers.ContestController.getMyContestEntry(contest)
GET            /v2/get_my_contest_entry/:contest                       controllers.ContestControllerV2.getMyContestEntryV2(contest)
GET            /get_soccer_players_availables_to_change/:contest       controllers.ContestController.getSoccerPlayersAvailablesToChange(contest)

# Live contests asociados a usuario
GET            /get_live_match_events/template_contest/:contest        controllers.ContestController.getLiveMatchEventsFromTemplateContest(contest)
GET            /get_live_match_events/contest/:contest                 controllers.ContestController.getLiveMatchEventsFromContest(contest)
GET            /get_live_contest_entries/:contest                      controllers.ContestController.getLiveContestEntries(contest)

# Entrar/Salir concurso
POST           /add_contest_entry                                      controllers.ContestEntryController.addContestEntry()
POST           /edit_contest_entry                                     controllers.ContestEntryController.editContestEntry()
POST           /cancel_contest_entry                                   controllers.ContestEntryController.cancelContestEntry()
POST           /change_soccer_player                                   controllers.ContestEntryController.changeSoccerPlayer()
GET            /generate_lineup/:contest/:formation                    controllers.ContestEntryController.generateLineup(contest, formation)

# Guilds
GET            /get_guilds                                             controllers.GuildController.getGuilds()
POST           /create_guild                                           controllers.GuildController.createGuild()
GET            /request_to_enter/:guildId                              controllers.GuildController.requestToEnter(guildId : String)
GET            /reject_request_to_enter/:userId                        controllers.GuildController.rejectRequestToEnter(userId : String)
GET            /add_member_to_guild/:userId                            controllers.GuildController.acceptMember(userId : String)
GET            /change_rol/:userId/:rol                                controllers.GuildController.changeRol(userId : String, rol : String)
GET            /remove_member/:userId                                  controllers.GuildController.removeMember(userId : String)
GET            /remove_from_guild                                      controllers.GuildController.removeFromGuild()
GET            /get_guild_leaderboard                                  controllers.GuildController.getLeaderboard()

# Sincronizacion de nuestras maquinas locales con los datos de Opta
GET            /return_xml/:timestamp                                  controllers.OptaHttpController.returnXML(timestamp: Long)
GET            /remaining/:timestamp                                   controllers.OptaHttpController.remainingXMLs(timestamp: Long)
GET            /date_last_xml                                          controllers.OptaHttpController.dateLastXML()

# Promos
GET            /promos                                                 controllers.PromoController.getPromos()
GET            /promos/:codeName                                       controllers.PromoController.getPromo(codeName: String)

# Por aqui nos entran todos nuestros datos de opta
POST           /opta                                                   controllers.OptaHttpController.optaXmlInput()

# Paypal
GET            /paypal/approval_payment/:userId/:amount                controllers.PaypalController.approvalPayment(userId, amount : Double)
GET            /paypal/approval_buy/:userId/:productId                 controllers.PaypalController.approvalBuy(userId, productId)
GET            /paypal/execute_payment                                 controllers.PaypalController.executePayment()
GET            /paypal/verify_payment/:paymentId                       controllers.PaypalController.verifyPayment(paymentId)
GET            /paypal/history                                         controllers.PaypalController.history()
POST           /paypal/ipn                                             controllers.PaypalController.ipnListener()
POST           /paypal/webhook                                         controllers.PaypalController.webhook()
GET            /paypal/withdraw_funds/:amount                          controllers.PaypalController.withdrawFunds(amount : Integer)

# Store
POST           /store/buy/:paymentId                                   controllers.StoreController.buy(paymentId : String)
POST           /store/validator                                        controllers.StoreController.validator()

POST           /short_url                                              controllers.MainController.getShortUrl()

# Loguear error del cliente
POST           /log                                                    controllers.LoggerController.log()

# Leer la nota de la funcion preFlight
OPTIONS        /*path                                                  controllers.MainController.preFlight(path)

# Static assets
#GET            /                                                       controllers.Assets.at(path="/public", file="index.html")
GET             /                                                      controllers.MainController.ping()
GET            /*file                                                  controllers.Assets.at(path="/public", file)

