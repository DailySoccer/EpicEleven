GET         /                                                          controllers.admin.DashboardController.index()
GET         /reset_db                                                  controllers.admin.DashboardController.resetDB()

GET         /import_teams                                              controllers.admin.ImportController.showImportTeams()
GET         /import_all_new_teams                                      controllers.admin.ImportController.importAllNewTeams()
GET         /import_all_changed_teams                                  controllers.admin.ImportController.importAllChangedTeams()
GET         /import_all_teams                                          controllers.admin.ImportController.importAllTeams()
GET         /import_soccers                                            controllers.admin.ImportController.showImportSoccers()
GET         /import_all_new_soccers                                    controllers.admin.ImportController.importAllNewSoccers()
GET         /import_all_changed_soccers                                controllers.admin.ImportController.importAllChangedSoccers()
GET         /import_all_soccers                                        controllers.admin.ImportController.importAllSoccers()
GET         /import_match_events                                       controllers.admin.ImportController.showImportMatchEvents()
GET         /import_all_new_match_events                               controllers.admin.ImportController.importAllNewMatchEvents()
GET         /import_all_changed_match_events                           controllers.admin.ImportController.importAllChangedMatchEvents()
GET         /import_all_match_events                                   controllers.admin.ImportController.importAllMatchEvents()

GET         /points_translation/create                                 controllers.admin.PointsTranslationController.resetToDefault()
GET         /points_translations                                       controllers.admin.PointsTranslationController.index()
GET         /points_translation/add                                    controllers.admin.PointsTranslationController.newForm()
GET         /points_translation/edit/:pointsTranslationId              controllers.admin.PointsTranslationController.edit(pointsTranslationId)
POST        /points_translation/add                                    controllers.admin.PointsTranslationController.create()
GET         /points_translations/:eventType                            controllers.admin.PointsTranslationController.history(eventType: Integer)

GET         /lobby                                                     controllers.admin.AdminController.lobby()

GET         /users                                                     controllers.admin.UserController.index()

GET         /soccer_player_stats/:playerId                             controllers.admin.TemplateSoccerPlayerController.showStats(playerId : String)

GET         /fantasy_points/contest/:contestId/:playerId               controllers.admin.TemplateSoccerPlayerController.showFantasyPointsInContest(contestId : String, playerId : String)
GET         /fantasy_points/match_event/:matchEventId/:playerId        controllers.admin.TemplateSoccerPlayerController.showFantasyPointsInMatchEvent(matchEventId : String, playerId : String)

GET         /contest_entries                                           controllers.admin.ContestEntryController.index()
GET         /contest_entry/add                                         controllers.admin.ContestEntryController.newForm()
GET         /contest_enter/add/:contestId                              controllers.admin.ContestEntryController.enterContest(contestId : String)
POST        /contest_entry/add                                         controllers.admin.ContestEntryController.create()

GET         /contests                                                  controllers.admin.ContestController.index()
GET         /contest/:contestId                                        controllers.admin.ContestController.show(contestId : String)

GET         /match_events                                              controllers.admin.MatchEventController.index()
GET         /match_event/:templateMatchEventId                         controllers.admin.MatchEventController.show(templateMatchEventId : String)
GET         /match_event/optaEvents/:matchEventId                      controllers.admin.MatchEventController.showOptaEvents(matchEventId : String)

GET         /template_contests                                         controllers.admin.TemplateContestController.index()
GET         /template_contest/create_all                               controllers.admin.TemplateContestController.createAll()
GET         /template_contest/save/:templateContestId                  controllers.admin.TemplateContestController.edit(templateContestId : String)
GET         /template_contest/save                                     controllers.admin.TemplateContestController.newForm()
POST        /template_contest/save                                     controllers.admin.TemplateContestController.create()
GET         /template_contest/delete/:templateContestId                controllers.admin.TemplateContestController.destroy(templateContestId : String)
GET         /template_contest/:templateContestId                       controllers.admin.TemplateContestController.show(templateContestId : String)

GET         /template_match_events                                     controllers.admin.TemplateMatchEventController.index()
GET         /template_match_event/:templateMatchEventId                controllers.admin.TemplateMatchEventController.show(templateMatchEventId : String)

GET         /template_soccer_teams                                     controllers.admin.TemplateSoccerTeamController.index()
GET         /template_soccer_team/:templateSoccerTeam                  controllers.admin.TemplateSoccerTeamController.show(templateSoccerTeam : String)

GET         /template_soccer_players                                   controllers.admin.TemplateSoccerPlayerController.index()

GET         /opta_soccer_players                                       controllers.admin.OptaController.optaSoccerPlayers()
GET         /opta_soccer_teams                                         controllers.admin.OptaController.optaSoccerTeams()
GET         /opta_match_events                                         controllers.admin.OptaController.optaMatchEvents()
GET         /opta_events                                               controllers.admin.OptaController.optaEvents()
GET         /opta_events/update                                        controllers.admin.OptaController.updateOptaEvents()

GET         /switch_simulator                                          controllers.admin.SimulatorController.switchSimulator()
GET         /start_simulator                                           controllers.admin.SimulatorController.start()
GET         /reset_simulator                                           controllers.admin.SimulatorController.reset()
GET         /nextstep_simulator                                        controllers.admin.SimulatorController.nextStep()
GET         /pause_simulator                                           controllers.admin.SimulatorController.pause()
POST        /goto_date_simulator                                       controllers.admin.SimulatorController.gotoDate()
GET         /next_step_desc_simulator                                  controllers.admin.SimulatorController.nextStepDescription()
GET         /next_stop_simulator                                       controllers.admin.SimulatorController.nextStop()
GET         /is_created_simulator                                      controllers.admin.SimulatorController.isCreated()
GET         /is_paused_simulator                                       controllers.admin.SimulatorController.isPaused()
GET         /current_date_simulator                                    controllers.admin.SimulatorController.currentDate()
GET         /simulator_speed/:speed                                    controllers.admin.SimulatorController.setSpeed(speed : Int)
GET         /simulator_speed                                           controllers.admin.SimulatorController.getSpeed()

GET         /simulator                                                 controllers.admin.SnapshotController.index()
GET         /snapshot                                                  controllers.admin.SnapshotController.snapshot()
GET         /replay_last                                               controllers.admin.SnapshotController.replayLast()
GET         /continue_from_snapshot                                    controllers.admin.SnapshotController.continueFromSnapshot()
GET         /snapshot_dump                                             controllers.admin.SnapshotController.snapshotDump()
GET         /snapshot_restore                                          controllers.admin.SnapshotController.snapshotRestore()
GET         /import_salaries                                           controllers.admin.ImportController.importSalaries()
GET         /export_salaries                                           controllers.admin.ImportController.exportSalaries()

GET         /refresher                                                 controllers.admin.RefresherController.index()
GET         /import_from_last                                          controllers.admin.RefresherController.importFromLast()
GET         /refresher_in_progress                                     controllers.admin.RefresherController.inProgress()
GET         /last_date                                                 controllers.admin.RefresherController.lastDate()

GET         /test_start                                                controllers.admin.TestController.start()
GET         /test_goto_date/:timestamp                                 controllers.admin.TestController.gotoDate(timestamp : Long)

# Informar al webclient si el simulator esta activado (requiere Json)
GET         /is_simulator_activated                                    controllers.admin.SimulatorController.isSimulatorActivated()
