GET         /                                                          controllers.admin.DashboardController.index()
GET         /reset_db                                                  controllers.admin.DashboardController.resetDB()
GET         /initial_setup                                             controllers.admin.DashboardController.initialSetup()

GET         /import_teams                                              controllers.admin.ImportController.showImportTeams()
GET         /import_teams/:competitionId                               controllers.admin.ImportController.showImportTeamsFromCompetition(competitionId : String)
GET         /import_soccers                                            controllers.admin.ImportController.showImportSoccers()
GET         /import_match_events                                       controllers.admin.ImportController.showImportMatchEvents()


GET         /points_translation/create                                 controllers.admin.PointsTranslationController.resetToDefault()
GET         /points_translations                                       controllers.admin.PointsTranslationController.index()
GET         /points_translation/add                                    controllers.admin.PointsTranslationController.newForm()
GET         /points_translation/edit/:pointsTranslationId              controllers.admin.PointsTranslationController.edit(pointsTranslationId)
POST        /points_translation/add                                    controllers.admin.PointsTranslationController.create()
GET         /points_translations/:eventType                            controllers.admin.PointsTranslationController.history(eventType: Integer)

GET         /lobby                                                     controllers.admin.AdminController.lobby()

GET         /setmongo/:appEnv                                          controllers.admin.AdminController.setMongoAppEnv(appEnv : String)
GET         /getmongo                                                  controllers.admin.AdminController.getMongoAppEnv()

GET         /users                                                     controllers.admin.UserController.index()
GET         /user/:userId/transactions                                 controllers.admin.UserController.transactions(userId : String)

GET         /refunds                                                   controllers.admin.RefundController.index()
GET         /refund/:refundId                                          controllers.admin.RefundController.apply(refundId)

GET         /soccer_player_stats/:playerId                             controllers.admin.TemplateSoccerPlayerController.showStats(playerId : String)

GET         /fantasy_points/contest/:contestId/:playerId               controllers.admin.TemplateSoccerPlayerController.showFantasyPointsInContest(contestId : String, playerId : String)
GET         /fantasy_points/match_event/:matchEventId/:playerId        controllers.admin.TemplateSoccerPlayerController.showFantasyPointsInMatchEvent(matchEventId : String, playerId : String)

GET         /contests                                                  controllers.admin.ContestController.index()
GET         /contests/ajax                                             controllers.admin.ContestController.indexAjax()
GET         /contest/:contestId                                        controllers.admin.ContestController.show(contestId : String)

GET         /template_contests                                         controllers.admin.TemplateContestController.index()
GET         /template_contests/ajax                                    controllers.admin.TemplateContestController.indexAjax()
GET         /template_contest/create_all                               controllers.admin.TemplateContestController.createAll()
GET         /template_contest/save/:templateContestId                  controllers.admin.TemplateContestController.edit(templateContestId : String)
GET         /template_contest/save                                     controllers.admin.TemplateContestController.newForm()
POST        /template_contest/save                                     controllers.admin.TemplateContestController.create()
GET         /template_contest/delete/:templateContestId                controllers.admin.TemplateContestController.destroy(templateContestId : String)
GET         /template_contest/:templateContestId                       controllers.admin.TemplateContestController.show(templateContestId : String)

GET         /template_match_events                                     controllers.admin.TemplateMatchEventController.index()
GET         /template_match_event/:templateMatchEventId                controllers.admin.TemplateMatchEventController.show(templateMatchEventId : String)
GET         /template_match_event/optaEvents/:matchEventId             controllers.admin.TemplateMatchEventController.showOptaEvents(matchEventId : String)

GET         /template_soccer_teams                                     controllers.admin.TemplateSoccerTeamController.index()
GET         /template_soccer_team/:templateSoccerTeam                  controllers.admin.TemplateSoccerTeamController.show(templateSoccerTeam : String)

GET         /template_soccer_players                                   controllers.admin.TemplateSoccerPlayerController.index()
GET         /template_soccer_players/ajax                              controllers.admin.TemplateSoccerPlayerController.indexAjax()
GET         /template_soccer_player/edit_salaries                      controllers.admin.TemplateSoccerPlayerController.editSalaries()
GET         /template_soccer_player/:soccerPlayer/salary/:salary       controllers.admin.TemplateSoccerPlayerController.changeSalary(soccerPlayer : String, salary : Int)

GET         /opta_competitions                                         controllers.admin.OptaController.optaCompetitions()
GET         /opta_competitions/:competition/activated/:state           controllers.admin.OptaController.changeCompetitionState(competition : String, state : String)
GET         /opta_competitions/create_all                              controllers.admin.OptaController.createAllCompetitions()
GET         /opta_soccer_players                                       controllers.admin.OptaController.optaSoccerPlayers()
GET         /opta_soccer_teams                                         controllers.admin.OptaController.optaSoccerTeams()
GET         /opta_match_events                                         controllers.admin.OptaController.optaMatchEvents()
GET         /opta_events                                               controllers.admin.OptaController.optaEvents()
GET         /opta_events/ajax                                          controllers.admin.OptaController.optaEventsAjax()
GET         /opta_events/update                                        controllers.admin.OptaController.updateOptaEvents()

GET         /switch_simulator                                          controllers.admin.SimulatorController.switchSimulator()
GET         /start_simulator                                           controllers.admin.SimulatorController.start()
GET         /reset_simulator                                           controllers.admin.SimulatorController.reset()
GET         /nextstep_simulator                                        controllers.admin.SimulatorController.nextStep()
GET         /pause_simulator                                           controllers.admin.SimulatorController.pause()
POST        /goto_date_simulator                                       controllers.admin.SimulatorController.gotoDate()
GET         /next_step_desc_simulator                                  controllers.admin.SimulatorController.nextStepDescription()
GET         /next_stop_simulator                                       controllers.admin.SimulatorController.nextStop()
GET         /is_created_simulator                                      controllers.admin.SimulatorController.isCreated()
GET         /is_paused_simulator                                       controllers.admin.SimulatorController.isPaused()
GET         /current_date_simulator                                    controllers.admin.SimulatorController.currentDate()
GET         /simulator_speed/:speed                                    controllers.admin.SimulatorController.setSpeed(speed : Int)
GET         /simulator_speed                                           controllers.admin.SimulatorController.getSpeed()

GET         /simulator                                                 controllers.admin.SnapshotController.index()
GET         /snapshot                                                  controllers.admin.SnapshotController.snapshot()
GET         /continue_from_snapshot                                    controllers.admin.SnapshotController.continueFromSnapshot()
GET         /snapshot_dump                                             controllers.admin.SnapshotController.snapshotDump()
GET         /snapshot_restore                                          controllers.admin.SnapshotController.snapshotRestore()

GET         /refresher                                                 controllers.admin.RefresherController.index()
GET         /import_from_last                                          controllers.admin.RefresherController.importFromLast()
GET         /refresher_in_progress                                     controllers.admin.RefresherController.inProgress()
GET         /last_date                                                 controllers.admin.RefresherController.lastDate()

# Test Driven Routes
GET         /test_goto/:year/:month/:day/:hour/:minute                 controllers.admin.TestController.gotoDateTest(year: Int, month: Int, day: Int, hour: Int, minute: Int)
GET         /test_start                                                controllers.admin.TestController.start()
GET         /test_goto_timestamp/:timestamp                            controllers.admin.TestController.gotoDate(timestamp : Long)
GET         /test_current_date                                         controllers.admin.TestController.getCurrentDate()

GET         /test_initial_setup                                        controllers.admin.TestController.initialSetup()
GET         /create_contests/:mockIndex                                controllers.admin.TestController.createContests(mockIndex: Int)

# Informar al webclient si el simulator esta activado (requiere Json)
GET         /is_simulator_activated                                    controllers.admin.SimulatorController.isSimulatorActivated()

# WIP
GET         /excel                                                     controllers.admin.ExcelController.index()
POST        /excel/upload                                              controllers.admin.ExcelController.upload()

GET         /excel/write_log                                           controllers.admin.ExcelController.writeSoccerPlayersLog()
